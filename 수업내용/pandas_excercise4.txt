12월 23일 연습문제 

티머니 홈페이지(https://www.t-money.co.kr/)에서 이용안내 선택 > 대중교통 통계자료 선택 > 최근 월간 교통카드 통계자료 게시글에서 엑셀 첨부 파일 다운로드합니ㅏㄷ.
'버스정류장별 이용현황', '지하철 노서별 역별 이용현황', '지하철 유무임별 이용현황', '지하철 시간대별 이용현황' 4개의 탭 확인

1. 지하철 시간대별 이용 현황 데이터 시각화
 

2. 출근 시간대 (7시 ~9시) 가장 많이 타고 내리는 역 찾기


3. 밤 11시에 가장 많이 타는 역 찾기


4. titanic data set 을 decision tree로 분류 분석하시오
X = ndf[ ['pclass', 'sex', 'age', 'sibsp', 'parch', 'embarked']]
Y = ndf['survived']





#####박경인###############################################################
import pandas as pd

# 데이터 로드
df = pd.read_csv('/content/gdrive/My Drive/data/2019_11data.csv', encoding='cp949', header=None).iloc[2:, 3:]
df.set_index(df.iloc[:,0], inplace=True)
df.drop(df.columns[[0,-1]], axis=1, inplace=True)
df.columns = [['%s-%s'%((i+4)%24, (i+5)%24) for i in range(24) for _ in (0,1)], ['승차', '하차']*24]
df = df.applymap(lambda x: int(x.replace(',', '')))

# 컬럼 추가
df_sum = df.sum()
order = df_sum.index.get_level_values(0).unique()
df_sum = df_sum.unstack().reindex(order)
df_sum['승차 누적'] = df_sum['승차'].cumsum()
df_sum['하차 누적'] = df_sum['하차'].cumsum()
df_sum['합계 누적'] = df_sum['승차 누적'] - df_sum['하차 누적']

# 1: 지하철 시간대별 이용 현황 데이터 시각화
df_sum['합계 누적'].plot(figsize=(10,4), kind='bar')

# 2: (7~9)시에 가장 많이 타고 내리는 역 찾기
df[['7-8', '8-9']].sum(level=1 ,axis=1).idxmax()

# 3: 밤 11~12시에 가장 많이 타는 역 찾기
df['23-0']['승차'].idxmax()

# ****************************************************************************

# 4: 타이타닉 데이터 셋 의사결정나무로 분류
import seaborn as sns
import pandas as pd

# 데이터 로드
df = sns.load_dataset('titanic')

# info 확인
print(df.info())

# NA 개수 확인
print(df.isna().sum())

# 891row 중 688개가 na인 deck컬럼 삭제
del df['deck']

# age 또한 177개가 na이지만, 주요 상관 변수 이므로 해당 row만 삭제
df.dropna(subset=['age'], inplace=True)

# 범주형 데이터 ONE HOT 인코딩
onehot = pd.get_dummies(df[['sex', 'embarked']])

# 독립 변수, 종속 변수 할당
X = df[['pclass', 'age', 'sibsp', 'parch']].join(onehot)
Y = df['survived']


# 학습 데이터, 테스트 데이터 분할
from sklearn.model_selection import train_test_split as tts
X_train, X_test, Y_train, Y_test = tts(X, Y, test_size=0.3, random_state=10)

# 의사결정나무 생성
from sklearn import tree
tree_model = tree.DecisionTreeClassifier(criterion='entropy', max_depth=5)

# 학습
tree_model.fit(X_train, Y_train)

# 예측
y_predict = tree_model.predict(X_test)

# 성능 평가
from sklearn import metrics
tree_matrix = metrics.confusion_matrix(Y_test, y_predict)
print(tree_matrix)
tree_report = metrics.classification_report(Y_test, y_predict)
print(tree_report)


#####김명환########################################################
import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import matplotlib.font_manager as fm

from matplotlib import font_manager, rc

fm.get_fontconfig_fonts()

font_location = 'data/malgun.ttf' # For Windows

font_name = fm.FontProperties(fname=font_location).get_name()

#matplotlib.rc('font', family=font_name)

rc('font', family=font_name)

df = pd.read_excel('./data/2019년_11월_ 교통카드_통계자료 - 복사본.xls', sheet_name='지하철 시간대별 이용현황', header=None) # 지하철 시간대별 이용현황,
df.head()
# NaN 값 앞에 값으로 채우기
df = df.fillna(method='ffill', axis=1)
print(df.shape)
df.iloc[0,4:52] = df.iloc[0,4:52] + df.iloc[1,4:52]
df.columns = df.iloc[0,:]
df.drop([0,1],inplace=True)
# 불필요 항목 삭제
df.drop(['역ID','작업일시'], axis=1, inplace=True)
print(df.columns)
df.reset_index(drop=True, inplace=True)
df
#1. 지하철 시간대별 이용 현황 데이터 시각화
useage_list = df.iloc[:,4:].sum()
useage_list

#그래프 서식 지정
plt.style.use('ggplot')


#
useage_list.plot(kind='bar', color='blue', figsize=(20,10))

plt.xlabel('시간 및 승/하차')
plt.ylabel('이용자 수 ')

# 2. 출근 시간대 (7시 ~9시) 가장 많이 타고 내리는 역 찾기
# 많이 타는 역 찾기
sumof_list = df['07:00:00~07:59:59승차'] + df['08:00:00~08:59:59승차']
sumof_list = sumof_list.astype(int)
print("출근 시간대 (7시 ~9시)  많이 타는 역 : ",df.loc[sumof_list.idxmax() ,'지하철역'])

#많이 내리는 역 찾기
sumof_list2 = df['07:00:00~07:59:59하차'] + df['08:00:00~08:59:59하차']
sumof_list2 = sumof_list2.astype(int)
print("출근 시간대 (7시 ~9시)  많이 내리는 역 : ",df.loc[sumof_list2.idxmax() ,'지하철역'])

#3. 밤 11시에 가장 많이 타는 역 찾기
many_of_list = df['23:00:00~23:59:59승차']
many_of_list = many_of_list.astype(int)
print("밤 11시에 많이 타는 역 : ",df.loc[many_of_list.idxmax() ,'지하철역'])


#####김명환#############################################
import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import matplotlib.font_manager as fm

from matplotlib import font_manager, rc

fm.get_fontconfig_fonts()

font_location = 'data/malgun.ttf' # For Windows

font_name = fm.FontProperties(fname=font_location).get_name()

#matplotlib.rc('font', family=font_name)

rc('font', family=font_name)

df = pd.read_excel('./data/2019년_11월_ 교통카드_통계자료 - 복사본.xls', sheet_name='지하철 시간대별 이용현황', header=None) # 지하철 시간대별 이용현황,
df.head()
# NaN 값 앞에 값으로 채우기
df = df.fillna(method='ffill', axis=1)
print(df.shape)
df.iloc[0,4:52] = df.iloc[0,4:52] + df.iloc[1,4:52]
df.columns = df.iloc[0,:]
df.drop([0,1],inplace=True)
# 불필요 항목 삭제
df.drop(['역ID','작업일시'], axis=1, inplace=True)
print(df.columns)
df.reset_index(drop=True, inplace=True)
df
#1. 지하철 시간대별 이용 현황 데이터 시각화
useage_list = df.iloc[:,4:].sum()
useage_list

#그래프 서식 지정
plt.style.use('ggplot')


#
useage_list.plot(kind='bar', color='blue', figsize=(20,10))

plt.xlabel('시간 및 승/하차')
plt.ylabel('이용자 수 ')

# 2. 출근 시간대 (7시 ~9시) 가장 많이 타고 내리는 역 찾기
# 많이 타는 역 찾기
sumof_list = df['07:00:00~07:59:59승차'] + df['08:00:00~08:59:59승차']
sumof_list = sumof_list.astype(int)
print("출근 시간대 (7시 ~9시)  많이 타는 역 : ",df.loc[sumof_list.idxmax() ,'지하철역'])

#많이 내리는 역 찾기
sumof_list2 = df['07:00:00~07:59:59하차'] + df['08:00:00~08:59:59하차']
sumof_list2 = sumof_list2.astype(int)
print("출근 시간대 (7시 ~9시)  많이 내리는 역 : ",df.loc[sumof_list2.idxmax() ,'지하철역'])

#3. 밤 11시에 가장 많이 타는 역 찾기
many_of_list = df['23:00:00~23:59:59승차']
many_of_list = many_of_list.astype(int)
print("밤 11시에 많이 타는 역 : ",df.loc[many_of_list.idxmax() ,'지하철역'])

4. titanic data set 을 decision tree로 분류 분석하시오
X = ndf[ ['pclass', 'sex', 'age', 'sibsp', 'parch', 'embarked']]
Y = ndf['survived']

#Embarked 컬럼에 ONE-Hot Encoding 적용

df = sns.load_dataset('titanic')
print(df.info())
df.drop(['fare','class','who','adult_male','deck','embark_town','alive','alone'],axis=1 ,inplace=True)

# age 컬럼의 결측치 제거
df.dropna(subset=['age'], axis=0 , inplace=True)

df['sex'].replace({'male':1 , 'female':0}, inplace=True)
onehot_embarked = pd.get_dummies(df['embarked'], prefix='town') # embarked 의 컬럼을 각 변수에 따라 town_$로 지정한다.
print(onehot_embarked)
df.drop(['embarked'], axis=1 , inplace=True)
df = pd.concat([df, onehot_embarked], axis=1) # ndf에 onehot_embarked 결합한다.

print(df)

#변수 설정

#독립변수
X = df[['pclass', 'sex', 'age', 'sibsp', 'parch', 'town_Q','town_S','town_C']]
print(X)


#종속변수
Y = df['survived']
# 설명변수 데이터 정규화
from sklearn import preprocessing
X = preprocessing.StandardScaler().fit(X).transform(X)
print(X)
#train/test set 7:3으로 분리
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y , test_size= 0.3 , random_state=10)
print(X_train.shape)
print(X_test.shape)
# Decision Tree 분류 생성
from sklearn import tree

tree_model = tree.DecisionTreeClassifier(criterion='entropy', max_depth=250)
tree_model.fit(X_train, Y_train)

y_predict = tree_model.predict(X_test)

print(y_predict[:10])
print(Y_test.values[:10])

from sklearn import metrics
tree_matrix = metrics.confusion_matrix(Y_test, y_predict)
print(tree_matrix)

tree_report = metrics.classification_report(Y_test, y_predict)
print(tree_report)


#####최서환#####################################################
%matplotlib inline
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_excel("./2019년 11월  교통카드 통계자료.xls", header=[0, 1], sheet_name = '지하철 시간대별 이용현황')
df = df.rename(columns=lambda x: x if not 'Unnamed' in str(x) else '')

df.columns = ['.'.join(col) for col in df.columns]

for i in range(len(df)):
    df.iloc[i, [4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47]] = df.iloc[i, [4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47]].str.replace(',', "")
    df.iloc[i, 4:51] = df.iloc[i, 4:51].astype(int)


#1. 지하철 시간대별 이용 현황 데이터 시각화
from matplotlib import font_manager, rc
font_path='C:\Windows\Fonts\Malgun.ttf'   
font_name= font_manager.FontProperties(fname=font_path).get_name()
rc('font', family=font_name)

columns = list(df.iloc[:,4:52])

df[columns].plot()
plt.title("서울시 지하철 시간대별 이용 현황 데이터")
plt.xlabel("시간")
plt.ylabel("명수")
plt.show()


#2. 출근 시간대 (7시 ~9시) 가장 많이 타고 내리는 역 찾기
df['07:00:00~09:59:59_total'] = df['07:00:00~07:59:59.승차'] + df['07:00:00~07:59:59.하차'] + df['08:00:00~08:59:59.승차'] + df['08:00:00~08:59:59.하차']
index = df['07:00:00~09:59:59_total'].idxmax()
print(df.iloc[index,[3]])


#3. 밤 11시에 가장 많이 타는 역 찾기
index = df['23:00:00~23:59:59.승차'].idxmax()
print(df.iloc[index,[3]])