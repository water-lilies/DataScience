#######################TimeStamp 객체 생성과 인덱스 지정 ##############
import pandas as pd

df = pd.read_csv("./datas/stock-data.csv")
print(df.head())
print(df.info())

#문자열 데이터를 pandas의  Timestamp로 변환해서 새로운 열로 추가 
df['new_Date'] = pd.to_datetime(df['Date'])  
print(df.head())
print(df.info())
print(df.type(df['new_Date']))
print(df.type(df['new_Date'][0])) 

df.set_index('new_Date', inplace=True)
df.drop('Date', axis=1, inplace=True)
print(df.head())
print(df.info())


########################Timestamp를 Period로 변환#########################
import pandas as pd

dates = ['2019-01-01', '2020-03-01', '2021-06-01']

ts_dates= pd.to_datetime(dates)  #Timestamp로 변환
print(ts_dates)

pr_day = ts_dates.to_period(freq='D') #Timestamp를 Period로 변환
print(pr_day)

pr_month = ts_dates.to_period(freq='M')
print(pr_month)

pr_year = ts_dates.to_period(freq='A')
print(pr_year)


##############배열 형태의 시계열 데이터 생성 ####################
import pandas as pd

ts_ms = pd.date_range(start='2019-01-01',
                   end=None,
                   periods=6,
                   freq='MS' ,   #월의 시작일 시간 간격
                   tz = 'Asia/Seoul')
print(ts_ms)

ts_me = pd.date_range(start='2019-01-01',
                   end=None,
                   periods=6,
                   freq='M' ,   #월의 마지막날 시간 간격
                   tz = 'Asia/Seoul')
print(ts_me)

ts_3m = pd.date_range(start='2019-01-01',
                   end=None,
                   periods=6,
                   freq='3M' ,   #3개월 시간 간격
                   tz = 'Asia/Seoul')
print(ts_3m)


pr_m = pd.period_range(start='2019-01-01',
                   end=None,
                   periods=3,
                   freq='M')   #기간의 길이는 (M:월)
print(pr_m)

pr_h = pd.period_range(start='2019-01-01',
                   end=None,
                   periods=3,
                   freq='H')   #기간의 길이는 (H: 시간)
print(pr_h)

pr_5h = pd.period_range(start='2019-01-01',
                   end=None,
                   periods=3,
                   freq='5H')   #기간의 길이는 (5H: 5시간)
print(pr_5h)




########################################
import pandas as pd

df = pd.read_csv("./datas/stock-data.csv")
print(df.head())
print(df.info())

#문자열 데이터를 pandas의  Timestamp로 변환해서 새로운 열로 추가 
df['new_Date'] = pd.to_datetime(df['Date'])  
print(df.head())
print(df.info())
 
#년, 월, 일  값 속성으로 접근
df['Year'] = df['new_Date'].dt.year
df['Month'] = df['new_Date'].dt.month
df['Day'] = df['new_Date'].dt.day
print(df.head())

df['Date_yr'] = df['new_Date'].dt.to_period(freq='A')
df['Date_m'] = df['new_Date'].dt.to_period(freq='M')
print(df.head())

df.set_index( 'Date_m' , inplace=True)
print(df.head())


########################################
import pandas as pd

df = pd.read_csv("./datas/stock-data.csv")
print(df.head())
print(df.info())

#문자열 데이터를 pandas의  Timestamp로 변환해서 새로운 열로 추가 
df['new_Date'] = pd.to_datetime(df['Date'])  
df.set_index( 'new_Date' , inplace=True)
print(df.head())
print(df.index)

df_y = df['2018']
print(df_y)
df_ym = df.loc['2018-07']
print(df_ym)

df_ym_cols = df.loc['2018-07', 'Start':'High']
print(df_ym_cols)

df_ymd_range =df.loc['2018-06-25': '2018-06-20']
print(df_ymd_range)

#######################pivot_table()와 crosstab() 함수##############

import pandas as pd
import seaborn as sns

pd.set_option('display.max_columns', 10)  #출력할 최대 열 개수
pd.set_option('display.max_colwidth', 20) #출력할 최대 열 너미

titanic = sns.load_dataset('titanic')
df = titanic.loc[:, ['age', 'sex', 'class', 'fare', 'survived']]
print(df.head())
print('\n')

pdf1 = pd.pivot_table(df, 
                             index = 'class',      #행 위치에 들어갈 열
                             columns = 'sex',    #열  위치에 들어갈 열
                             values = 'age',      #데이터로 사용할 열
                             aggfunc='mean')   #데이터 집계 함수
print(pdf1.head())
print('\n')


pdf2 = pd.pivot_table(df, 
                             index = 'class',      #행 위치에 들어갈 열
                             columns = 'sex',    #열  위치에 들어갈 열
                             values = 'survived',      #데이터로 사용할 열
                             aggfunc=['mean', 'sum'])   #데이터 집계 함수
print(pdf2.head())
print('\n')

pdf3 = pd.pivot_table(df, 
                             index = ['class', 'sex'],      #행 위치에 들어갈 열
                             columns = 'survived',    #열  위치에 들어갈 열
                             values = ['age', 'fare'],      #데이터로 사용할 열
                             aggfunc=['mean', 'max'])   #데이터 집계 함수
print(pdf3.head())
print(pdf3.index)
print(pdf3.columns)

print(pdf3.xs('First'))   #행 인덱스가 First인 행 선택
print(pdf3.xs('First', 'Female')) 
print(pdf3.xs('mean', axis=1))   #열 인덱스가 mean인 데이터 선택
print(pdf3.xs(('mean', 'age'), axis=1))
print(pdf3.xs(1, level='survived',  axis=1))  #survived 레벨이 1인 데이터 선택

df = titanic.loc[:, ['age', 'sex', 'class', 'fare', 'survived']]
pd.crosstab(df['class'], df['sex'],  margins=True) # 교차 빈도 테이블
pd.crosstab([df['class'], df['sex']],  survived,  margins=True) # 교차 빈도 테이블




##########################지도 이용 시각화##############################
라이브러리 설치 >  conda install folium

import folium
seoul_map = folium.Map(location=[37.55, 126.98], zoom_start=12)

seoul_map.save('./output/seoul.html')


####################################################################
import folium
seoul_map1 = folium.Map(location=[37.55, 126.98], tiles = 'Stamen Terrain' , zoom_start=12)
seoul_map2 = folium.Map(location=[37.55, 126.98], tiles = 'Stamen Toner' , zoom_start=12)

seoul_map2.save('./output/seoul2.html')
seoul_map1.save('./output/seoul1.html')



####################################################################
import folium
import pandas as pd

df = pd.read_excel('./datas/서울지역 대학교 위치.xlsx')
df.columns=['대학', '위도', '경도']
print(df)
seoul_map = folium.Map(location=[37.55, 126.98], tiles = 'Stamen Terrain' , zoom_start=12)

for  name, lat, lng in zip(df.대학, df.위도, df.경도):
    folium.Marker([lat, lng], popup=name).add_to(seoul_map)	

seoul_map.save('./output/seoul_colleges.html')


####################################################################
import folium
import pandas as pd

df = pd.read_excel('./datas/서울지역 대학교 위치.xlsx')
df.columns=['대학', '위도', '경도']
print(df)
seoul_map = folium.Map(location=[37.55, 126.98], tiles = 'Stamen Terrain' , zoom_start=12)

for  name, lat, lng in zip(df.대학, df.위도, df.경도):
    folium.CircleMarker([lat, lng], radius=10, color='black' , fill=True,  fill_color='yellow',
                                          fill_opacity=0.7,  popup=name).add_to(seoul_map)	

seoul_map.save('./output/seoul_colleges2.html')

###############################################################
import folium
import pandas as pd
import json

df = pd.read_excel('./datas/경기도인구데이터.xlsx', index_col='구분')
df.columns=df.columns.map(str)
#print(df)

geo_data = json.load(open('./datas/경기도행정구역경계.json', encoding='utf-8'))
#print(geo_data)

g_map = folium.Map(location=[37.5502, 126.982], tiles = 'Stamen Terrain' , zoom_start=9) 	
year= '2017'
folium.Choropleth(geo_data=geo_data,
                        data= df[year],
                        columns = [df.index, df[year]],
                        fill_color='YlOrRd', fill_opacity=0.7, line_opacity=0.3,
                        threshold_scale=[10000, 100000, 300000, 500000, 700000],
                        key_on = 'feature.properties.name').add_to(g_map)

g_map.save('./output/gyonggi_pop_2017.html')




##############################################################
https://github.com/wesm/pydata-book/blob/2nd-edition/ch08.ipynb
##############################################################
%matplotlib notebook

import pandas as pd
import matplotlib.pyplot as plt

#matplotlib 한글 폰트 오류 문제 해결
from matplotlib import font_manager, rc
font_path='./datas/malgun.ttf'      
font_name= font_manager.FontProperties(fname=font_path).get_name()
rc('font', fmaily=font_name)

#시도별 전출입 인구수.xlsx파일을 결측치는 0으로 대체,  첫번째 행을 header로 데이터 프레임 생서
df = pd.read_excel('./datas/시도별 전출입 인구수.xlsx', fillna=0, header=0)

#데이터 프레임의 데이터중 누락값을 찾아서 앞 행의 동일컬럼의 값으로 채웁니다.
df = df.fillna(method='ffill')

# 서울에서 다른 지역으로 이동한 데이터만 추출하여 정리
mask = (df['전출지별'] == '서울특별시') & (df['전입지별'] != '서울특별시') 
df_seoul = df[mask]
df_seoul = df_seoul.drop(['전출지별'], axis=1)
df_seoul.rename({'전입지별':'전입지'}, axis=1, inplace=True)
df_seoul.set_index('전입지', inplace=True)

##서울에서 '충청남도', '경상북도', '강원도' , '전라남도' 로 이동한 인구 데이터 값 선택 (1970~2018)
col_years = list(map(str, range(1970, 2018)))
df_4 = df_seoul.loc[['충청남도','경상북도', '강원도', '전라남도'  ], col_years]
df_4 = df_4.transpose()

# 스타일 서식 지정
plt.style.use('ggplot') 

#데이터프레임의 인덱스를 정수형으로 변경 (x축 눈금 라벨로 표시)
df_4.index=df_4.index.map(int)

#df_4.plot(kind='area', stacked=False, alpha=0.2, figsize=(20, 10))
#df_4.plot(kind='area', stacked=True, alpha=0.2, figsize=(20, 10))
df_4.plot(kind='bar', width=0.7, color=['orange', 'green', 'skyblue', 'pink'],  figsize=(20, 10))

# 차트 제목 추가
plt.title('서울 -> 충남, 경북, 강원, 전라 인구 이동', size=30)

# 축이름 추가
plt.xlabel('기간', size=12)
plt.ylabel('이동 인구수', size = 12)
plt.legend(loc='best', fontsize=15)
plt.ylim(50000, 300000)
plt.show()

##########################################################################
%matplotlib notebook

import pandas as pd
import matplotlib.pyplot as plt

#matplotlib 한글 폰트 오류 문제 해결
from matplotlib import font_manager, rc
font_path='./datas/malgun.ttf'      
font_name= font_manager.FontProperties(fname=font_path).get_name()
rc('font', fmaily=font_name)

#시도별 전출입 인구수.xlsx파일을 결측치는 0으로 대체,  첫번째 행을 header로 데이터 프레임 생서
df = pd.read_excel('./datas/시도별 전출입 인구수.xlsx', fillna=0, header=0)

#데이터 프레임의 데이터중 누락값을 찾아서 앞 행의 동일컬럼의 값으로 채웁니다.
df = df.fillna(method='ffill')

# 서울에서 다른 지역으로 이동한 데이터만 추출하여 정리
mask = (df['전출지별'] == '서울특별시') & (df['전입지별'] != '서울특별시') 
df_seoul = df[mask]
df_seoul = df_seoul.drop(['전출지별'], axis=1)
df_seoul.rename({'전입지별':'전입지'}, axis=1, inplace=True)
df_seoul.set_index('전입지', inplace=True)

##서울에서 '충청남도', '경상북도', '강원도' , '전라남도' 로 이동한 인구 데이터 값 선택 (1970~2018)
col_years = list(map(str, range(1970, 2018)))
df_4 = df_seoul.loc[['충청남도','경상북도', '강원도', '전라남도'  ], col_years]

df_4['합계'] = df_4.sum(axis=1)
df_total =  df_4[['합계']].sort_values(by='합계',  ascending=True)

# 스타일 서식 지정
plt.style.use('ggplot') 

df_total.plot(kind='barh', color='cornflowerblue', width=0.5, figsize=(10, 5))

 
# 차트 제목 추가
plt.title('서울 -> 충남, 경북, 강원, 전라 인구 이동')

# 축이름 추가
plt.xlabel('이동 인구수' )
plt.ylabel('전입지')
plt.show()


#############################seaborn regplot()######################################
%matplotlib notebook

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

titanic = sns.load_dataset("titanic")

#스타일 테마
sns.set_style('darkgrid')   # darkgrid, whitegrid, dark, white, ticks)

fig = plt.figure(figsize=(15, 5))
ax1 = fig.add_subplot((1, 2, 1))
ax2 = fig.add_subplot((1, 2, 2))

sns.regplot(x='age', y='fare', data=titanic, ax=ax1)
sns.regplot(x='age', y='fare', data=titanic, ax=ax2, fit_reg=False)

plt.show()




#############################seaborn heatmap()######################################
%matplotlib notebook

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

titanic = sns.load_dataset("titanic")

#스타일 테마
sns.set_style('darkgrid')   # darkgrid, whitegrid, dark, white, ticks)

#피봇 테이블로 범주형 변수를 행, 열로 재구분, 정리
table = titanic.pivot_table(index=['sex'], columns=['class'], aggfunc='size') 

sns.heatmap(table,  annot=True, fmt='d', cmap='YlGnBu', linewidth=5, cbar=False)
plt.show()




#############################seaborn box()######################################
%matplotlib notebook

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

titanic = sns.load_dataset("titanic")

#스타일 테마
sns.set_style('whitegrid')   # darkgrid, darkgrid, dark, white, ticks)

fig = plt.figure(figsize=(15, 10))
ax1 = fig.add_subplot(2, 2, 1)
ax2 = fig.add_subplot(2, 2, 2)
ax3 = fig.add_subplot(2, 2, 3)
ax4 = fig.add_subplot(2, 2, 4)

sns.boxplot(x='alive', y='age', data=titanic, ax=ax1)
sns.boxplot(x='alive', y='age', hue=sex, data=titanic, ax=ax2)
sns.violinplot(x='alive', y='age', data=titanic, ax=ax3)
sns.violinplot(x='alive', y='age', hue=sex, data=titanic, ax=ax4)

plt.show()




#############################seaborn pairplot()######################################
%matplotlib notebook

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

titanic = sns.load_dataset("titanic")


#스타일 테마
sns.set_style('whitegrid') 

titanic_pair = titanic[['age', 'pclass', 'fare']]

g = sns.pairplot(titanic_pair)

#########################Review########################################
re 모듈 - 정규 표현식을 지원 
정규 표현식 패턴에 일치하는 문자열을 검색 - findall, match, search
pandas의 Series객체에는 문자열에 대한 간결하게 처리 메소드 지원 - Series객체.str속성의 메서드
MultiIndex - 2개이상의 level을 가지는 인덱스 
2개이상의 level을 가지는 Series객체의 Index를 이용하여 데이터를 재배열해주는 메소드 - unstack
재배열된 데이터 구조를 2개이상의 level을 가지는 Series객체로 변환 - stack
2개이상의 level을 가지는 Series객체 - swaplevel()

info() - 데이터프레임의 기본 정보 (클래스 유형, 행 인덱스 구성, 열 이름의 종류와 개수, 각 열의 자료형과 개수, 메모리 할당량) 제공
decribe() - 기본 기술 통계 요약 (데이터프레임의 열에 대한 평균, 표준편차, 최소값, 최대값, 중앙값, 1/4분위값, 3/4분위값 등) 요약 반환
빈도수 - value_counts(), freq(), top()

pandas 기본 내장 시각화 도구 - 데이터프레임 객체.plot(kind=)

matplotlib 라이브러리 - 2D 평면 그래프에 관한 다양한 포맷과 기능 지원 
matplotlib.pyplot.plot()  - line chart가 기본 ,  점으로 그래프 표현  두번째 인수로 'o' 
제목 - title()
축이름 - xlabel(), ylabel()
그래프 틀 객체 (그래프의 size 지정 또는 그래프 분할 지정) - figure()
figure()로 생성된 그래프 객체에 분할영역을 생성(지정, 추가) - add_subplot() 
눈금 - xticks()
축 범위 - xlim(), ylim()
annotate() -그래프에 여러 형태의 설명을 추가하기 위해 사용
범레 - legend()
sub plot 객체 =add_subplot() 
sub plot 객체.set_title()
sub plot 객체.set_xlim()
그래프 꾸미기 옵션 - markerfacecolor , color, linewidth , label

데이터를 일정 구간으로 나눠서 분석하기 위해 
cut(data객체,  bins=경계값객체|구간개수 , label=, include_lower=) - 데이터를 일정 구간으로 나누기 위해 사용하는 함수 

숫자 데이터의 상대적인 크기에 대한 차이를 제거할 경우 - 열에 속하는 데이터값을 동일한 크기 기준으로 나눈 비율로 변환 => 정규화
비율로 변환하는 정규화 결과 데이터 범위 : 0~1 또는 -1~1 범위의 값이 됩니다.
비율로 변환하는 방법 - 열의 최대값으로 나눈 방법, 최대값-최소값으로 나누는 방법

범주형 척도(변수) :  예)  성별, 혈액형 - 빈도수 비율 분석이 의미가 있음
서열척도(변수) :  순서가 있는 데이터 예) 학년  - 빈도수 비율 분석이 의미가 있음
등간척도(변수) :  구간으로 나눠진 데이터 예) 만족도  - 절대원점(0)은 없고, 덧셈 뺄셈 연산 가능
비율 척도(연속형변수) :  절대원점(0)이 존재하고 , 산술연산 가능

Dummy 변수변환 - 어떤 특성이 있는지 없는지 여부만 표시하는 데이터 변환
get_dummies()  : one hot encoding - 0 과 1 값의 벡터 변환


merge() - 하나 이상의 키를 기준으로 dataframe 객체 병합 , 기본 병합방식은 교집합(inner)
merge(df1, df2)
merge(df1, df2, on= ,  right_on=, left_on=,  how=left|right|outer, left_index=True, right_index=True)

join()  -두 데이터프레임에서 행인덱스로 데이터 병합 , 기본 left join방식



